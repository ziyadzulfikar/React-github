{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","onEnterPress","e","keyCode","preventDefault","addItem","state","newItem","list","this","hydrateStateWithLocalStorage","window","addEventListener","saveStateToLocalStorage","bind","removeEventListener","key","localStorage","hasOwnProperty","value","getItem","JSON","parse","setState","setItem","stringify","id","Math","random","slice","push","updatedList","filter","item","className","style","padding","textAlign","maxWidth","margin","ref","el","myFormRef","type","placeholder","onChange","updateInput","target","onKeyDown","onClick","disabled","length","map","deleteItem","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OAoJeA,G,wDAhJb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA4FRC,aAAe,SAACC,GACG,KAAdA,EAAEC,UACHD,EAAEE,iBACF,EAAKC,YA9FP,EAAKC,MAAQ,CACXC,QAAS,GACTC,KAAM,IAJS,E,gEAUjBC,KAAKC,+BAILC,OAAOC,iBACL,eACAH,KAAKI,wBAAwBC,KAAKL,S,6CAKpCE,OAAOI,oBACL,eACAN,KAAKI,wBAAwBC,KAAKL,OAIpCA,KAAKI,4B,qDAKL,IAAK,IAAIG,KAAOP,KAAKH,MAEnB,GAAIW,aAAaC,eAAeF,GAAM,CAEpC,IAAIG,EAAQF,aAAaG,QAAQJ,GAGjC,IACEG,EAAQE,KAAKC,MAAMH,GACnBV,KAAKc,SAAL,eAAiBP,EAAMG,IACvB,MAAOjB,GAEPO,KAAKc,SAAL,eAAiBP,EAAMG,Q,gDAQ7B,IAAK,IAAIH,KAAOP,KAAKH,MAEnBW,aAAaO,QAAQR,EAAKK,KAAKI,UAAUhB,KAAKH,MAAMU,O,kCAI5CA,EAAKG,GAEfV,KAAKc,SAAL,eAAiBP,EAAMG,M,gCAKvB,IAAMZ,EAAU,CACdmB,GAAI,EAAIC,KAAKC,SACbT,MAAOV,KAAKH,MAAMC,QAAQsB,SAKtBrB,EAAI,YAAOC,KAAKH,MAAME,MAG5BA,EAAKsB,KAAKvB,GAGVE,KAAKc,SAAS,CACZf,OACAD,QAAS,O,iCAIFmB,GAET,IAEMK,EAFI,YAAOtB,KAAKH,MAAME,MAEHwB,QAAO,SAAAC,GAAI,OAAIA,EAAKP,KAAOA,KAEpDjB,KAAKc,SAAS,CAAEf,KAAMuB,M,+BAWd,IAAD,OACL,OACE,yBAAKG,UAAU,YACb,gCACA,wBAAIA,UAAU,aAAd,aAEE,yBAAKA,UAAU,aACb,yBAAKC,MAAO,CAACC,QAAS,GAAIC,UAAW,SAAUC,SAAU,IAAKC,OAAQ,SACpE,yCACA,2BAAOC,IAAK,SAAAC,GAAE,OAAI,EAAKC,UAAYD,GAAIf,GAAG,UAAUQ,UAAY,YAAYS,KAAK,OAAOC,YAAY,iBAAiBzB,MAAOV,KAAKH,MAAMC,QAASsC,SAAU,SAAA3C,GAAC,OAAI,EAAK4C,YAAY,UAAW5C,EAAE6C,OAAO5B,QAAQ6B,UAAWvC,KAAKR,eAC5N,4BACEyB,GAAG,QACHiB,KAAK,SACLT,UAAU,uBACVe,QAAS,kBAAM,EAAK5C,WACpB6C,UAAWzC,KAAKH,MAAMC,QAAQ4C,QAG9B,uBAAGjB,UAAU,kBAAb,QAEF,6BACE,wBAAIA,UAAU,QACXzB,KAAKH,MAAME,KAAK4C,KAAI,SAAAnB,GACnB,OACE,wBAAIjB,IAAKiB,EAAKP,GAAIQ,UAAU,aACzBD,EAAKd,MACN,4BAAQe,UAAU,mBAAmBe,QAAS,kBAAM,EAAKI,WAAWpB,EAAKP,MACvE,uBAAGQ,UAAU,kBAAb,mB,GAjIVoB,IAAMC,YCSJC,QACW,cAA7B7C,OAAO8C,SAASC,UAEe,UAA7B/C,OAAO8C,SAASC,UAEhB/C,OAAO8C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a5564737.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newItem: \"\",\n      list: []\n    };\n  }\n\n  //incorporating local storage \n  componentDidMount() {\n    this.hydrateStateWithLocalStorage();\n\n    // add event listener to save state to localStorage\n    // when user leaves/refreshes the page\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n\n    // saves if component has a chance to unmount\n    this.saveStateToLocalStorage();\n  }\n\n  hydrateStateWithLocalStorage() {\n    // for all items in state\n    for (let key in this.state) {\n      // if the key exists in localStorage\n      if (localStorage.hasOwnProperty(key)) {\n        // get the key's value from localStorage\n        let value = localStorage.getItem(key);\n\n        // parse the localStorage string and setState\n        try {\n          value = JSON.parse(value);\n          this.setState({ [key]: value });\n        } catch (e) {\n          // handle empty string\n          this.setState({ [key]: value });\n        }\n      }\n    }\n  }\n\n  saveStateToLocalStorage() {\n    // for every item in React state\n    for (let key in this.state) {\n      // save to localStorage\n      localStorage.setItem(key, JSON.stringify(this.state[key]));\n    }\n  }\n\n  updateInput(key, value) {\n    // update react state\n    this.setState({ [key]: value });\n  }\n\n  addItem() {\n    // create a new item with unique id\n    const newItem = {\n      id: 1 + Math.random(),\n      value: this.state.newItem.slice()\n \n    };\n\n    // copy current list of items\n    const list = [...this.state.list];\n\n    // add the new item to the list\n    list.push(newItem);\n\n    // update state with new list, reset the new item input\n    this.setState({\n      list,\n      newItem: \"\"\n    });\n  }\n\n  deleteItem(id) {\n    // copy current list of items\n    const list = [...this.state.list];\n    // filter out the item being deleted\n    const updatedList = list.filter(item => item.id !== id);\n\n    this.setState({ list: updatedList });\n  }\n \n  onEnterPress = (e) => {\n    if(e.keyCode === 13) {\n      e.preventDefault();\n      this.addItem();\n    }\n  }\n\n  \n  render() {\n      return (\n        <div className=\"todoBody\">\n          <center>\n          <h1 className=\"app-title\">TODO LIST</h1>\n            \n            <div className=\"container\">\n              <div style={{padding: 30, textAlign: \"center\", maxWidth: 500, margin: \"auto\"}}>\n                <h4>Add Items</h4>\n                <input ref={el => this.myFormRef = el} id=\"myInput\" className = \"inputItem\" type=\"text\" placeholder=\"Type item here\" value={this.state.newItem} onChange={e => this.updateInput(\"newItem\", e.target.value)} onKeyDown={this.onEnterPress}/>\n                <button\n                  id=\"myBtn\"\n                  type=\"submit\"\n                  className=\"add-btn btn-floating\"\n                  onClick={() => this.addItem()}\n                  disabled={!this.state.newItem.length}\n                  \n                >\n                  <i className=\"material-icons\"> + </i>\n                </button>\n                <br />\n                  <ul className=\"list\">\n                    {this.state.list.map(item => {\n                      return (\n                        <li key={item.id} className=\"listItems\">\n                          {item.value}\n                          <button className=\"btn btn-floating\" onClick={() => this.deleteItem(item.id)}>\n                            <i className=\"material-icons\">x</i>\n                          </button>\n                        </li>\n                      );\n                    })}\n                  </ul>\n                \n              </div>\n            </div>\n          </center>\n              \n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}